<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞舞伍five</title>
  
  <subtitle>难是因为不会，会是因为不难</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-16T03:14:11.079Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>右郁石</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/01/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer(2)/"/>
    <id>http://yoursite.com/2020/01/16/Java学习笔记/剑指offer(2)/</id>
    <published>2020-01-16T02:06:26.775Z</published>
    <updated>2020-01-16T03:14:11.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-2"><a href="#剑指offer-2" class="headerlink" title="##剑指offer(2)  "></a>##剑指offer(2)  </h2><h2 id="请实现一个函数，将一个字符串中的每个空格替换成“-20”。例如，当字符串为We-Are-Happy-则经过替换之后的字符串为We-20Are-20Happy。"><a href="#请实现一个函数，将一个字符串中的每个空格替换成“-20”。例如，当字符串为We-Are-Happy-则经过替换之后的字符串为We-20Are-20Happy。" class="headerlink" title="###请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。  "></a>###请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。  </h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public String replaceSpace(StringBuffer str) &#123;</span><br><span class="line">    String str1 = str.toString();</span><br><span class="line">        if(str1.equals(&quot;&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            return(str1);</span><br><span class="line">        &#125;</span><br><span class="line">        char [] strArray = str1.toCharArray();</span><br><span class="line">        int lengthSpace = 0;</span><br><span class="line">        for(int i = 0;i&lt;strArray.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(strArray[i]==&apos; &apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                lengthSpace++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int newStrLength = strArray.length + lengthSpace*2;</span><br><span class="line">        char [] newstrArray = new char[newStrLength];</span><br><span class="line">        int count = 0;</span><br><span class="line">        for(int i = 0;i&lt;strArray.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(strArray[i]!=&apos; &apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                newstrArray[i+count*2] = strArray[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                newstrArray[i+2*count]=&apos;%&apos;;</span><br><span class="line">                newstrArray[i+2*count+1]=&apos;2&apos;;</span><br><span class="line">                newstrArray[i+2*count+2]=&apos;0&apos;;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        return new String(newstrArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">public String replaceSpace(StringBuffer str) &#123;</span><br><span class="line">return str.toString().replaceAll(&quot;\\s&quot;, &quot;%20&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解：如果建新数组的话，从后往前还是从前往后都是一样的。???</p><ol><li>charAt(),deleteCharAt()   <blockquote><p>s1.charAt(3);<br> s1.deleteCharAt(3); </p></blockquote></li><li>setCharAt();<br>替换所引出的char值<blockquote><p>str.setCharAt(indexnew, ‘0’);</p></blockquote></li><li>append();  <blockquote><p>StringBuffer s1 = new StringBuffer().append(“bbb”);<br> s1.append(“aaa”);<br> System.out.println(s1.toString());</p></blockquote></li><li>replace两种用法：  <blockquote><p>replace(int start，int end, String str)<br>replace(char oldchar, char newchar)</p></blockquote></li><li>toString()  toCharArray()  <blockquote><p>StringBuffer s1 = new StringBuffer();<br>s1.toString();<br>String s2 = new String();<br>s2.toCharArray();</p></blockquote></li><li>delete(); insert(); indexOf(); lastIndexOf(); reverse(); length();<br>indexOf()返回指定字符串的开始字符索引位置，还可以从某个字符索引位置开始向后匹配，没有找到匹配的就会返回-1<br>lastIndexOf()是从后往前匹配，也支持从指定索引开始从后往前去匹配<blockquote><p>s1.delete(2,4);<br>s1.insert(2,”cc”);<br>System.out.println(s1.indexOf(“ba”));<br>System.out.println(s1.indexOf(“ba”,2));<br>System.out.println(s1.reverse());<br>System.out.println(s1.length());</p></blockquote></li><li>String,StringBuffer,StringBuilder三者的使用方法和区别<br>String适用于少量的字符串操作的情况<br>StringBuilder适用于单线程下在字符缓冲区进行大量操作的情况<br>StringBuffer适用多线程下在字符缓冲区进行大量操作的情况</li></ol><ol start="6"><li>一.java数据类型<br>1.基本数据类型<br>byte(1) boolean(1) short(2) char(2) int(4) float(4) long(8)double (8)<br>2.引用数据类型<br>string,数组，集合ArrayList,Scanner,Random,自定义类型<br>3.引用类型String中的方法<br>第一组：判断方法<br>boolean equals(String str);  //比较两个字符串是否相等<br>boolean equalsIgnoreCase(String str);  //比较两个内容是否相等 （忽略大小写）<br>boolean startsWith(String subStr); //判断某个字符串是否以指定的子串开头<br>boolean endsWith(String subStr); //判断某个字符串是否以指定的子串结尾<br>第二组：获取方法<br>int length();//获取字符串中字符个数<br>char charAt(int index); //获取字符串中某一个字符<br>String substring(int startIndex);//从指定下标开始截取字符串，直到字符串结尾<br>substring(int startIndex,int endIndex); //包括开头不包括结尾？<br>int indexof(String subStr); //获取子串第一次出现的下标<br>第三组：转换方法<br>String toLowerCase(); //转成小写串<br>String toUpperCase);  //转成大写串<br>Char[] toCharArray(); //变成字符数组<br>第四组：其他方法<br>String trim();//去掉字符串两端的空格<br>String[] split(String str); //切割字符串<br>三：读写文件<br>输出流：数据从java程序 到  文件中<br>FilWriter：文件的字符输出流，写数据  （一个字符，一个字符串，一个字符数组）<br>  write(int ch);// 写一个字符<br>  write(char[] chs); //写一个字符数组<br>  write(String s);// 写一个字符串<br>  write(char[] chs,int startInex,int len);// 写一个字符数组的一部分<br>  write(String s,int startInex,int len); //写一个字符串的一部分<br>输入流：数据从文件  到  java程序中<br>FileReader:文件的字符输入流,读数据（一个字符，一个字符数组）<br>   int read();//读取一个字符  ASCII<br>   int read(char[] chs); //一次读取一个字符数组，返回值是读取的字符的个数<br>文件的路径分为两种：<br>1.相对路径：<pre><code>相对于当前项目而言的</code></pre>2.绝对路径：<pre><code>以盘符开头</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-2&quot;&gt;&lt;a href=&quot;#剑指offer-2&quot; class=&quot;headerlink&quot; title=&quot;##剑指offer(2)  &quot;&gt;&lt;/a&gt;##剑指offer(2)  &lt;/h2&gt;&lt;h2 id=&quot;请实现一个函数，将一个字符串中的每个空格替换成“-20
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/01/11/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2020/01/11/Java学习笔记/java学习笔记1/</id>
    <published>2020-01-11T07:29:00.711Z</published>
    <updated>2020-02-05T13:20:35.688Z</updated>
    
    <content type="html"><![CDATA[<ol><li>类的概念：<br> 一堆 具有共同的成员变量、属性和成员方法、功能对象集合</li><li><p>接口的概念：<br> 接口是功能的集合，就是方法的集合<br> 也就是说 接口中只能定义方法，不能定义普通的成员变量<br> 而且接口中的成员方法，必须都是抽象的<br> 接口是比抽象类还要抽象的一种类型</p><p> 问题：接口能创建对象吗？不能</p><pre><code>接口作用：天生作为“父接口”</code></pre></li><li><p>接口的定义：<br> 定义接口用关键字：interface<br> 定义枚举用关键字：enum</p><p> 格式：<br> public interface 接口名字{</p><pre><code>//成员变量，不能定义普通的成员变量//成员方法：必须都是抽象public abstract 返回值类型 方法名();</code></pre><p> }</p><p> 类和接口的本质区别不大，他们的源码都是.java文件<br> 编译后都是.class文件</p></li><li><p>类与类之间：继承，而且是单继承，一个子类，只能有一个直接父类<br> 接口和接口之间:继承，但是可以多继承，一个子接口 可以有多个直接父接口</p><p> 面试题：Java到底支不支持多继承？</p><pre><code>如果是类与类  不支持多继承  只支持多层继承如果是接口和接口  支持多继承  也支持多层继承</code></pre><p> 类和接口之间：不叫继承(extends),叫实现(implements),可以多实现</p><pre><code>只有类 实现接口</code></pre></li><li>接口中成员的特点<br> 5.1成员变量，但是必须有固定修饰符public static final 数据类型 变量 = 值<br> 5.2成员方法，必须是固定修饰符public abstract 即抽象方法<br> 5.3接口不可以创建对象(抽象类也是)<br> 5.4实现类 实现类接口，那么必须重写接口中所有的抽象方法，然后才能创建对象<pre><code>否则 这个实现类 还是一个抽象类，是不能创建对象的在开发中最常用的模式：    public class A extends AbstractClassB implements 接口A，接口B{        注意：        A中必须重写 抽象类中的抽象方法，以及所有接口中的抽象方法    } </code></pre></li><li>接口和抽象类的异同：<br>1.相同点：<br> a.都不能创建对象<br> b.都是作为父类/父接口<br> c.子类/实现类 都必须重写抽象方法，然后才能创建对象<br>2.不同点：<br> a.抽象类用关键字abstract  接口用关键字interface<br> b.接口中只要有方法，必须都是抽象的<br> c.抽象类可以定义任意成员变量  接口的成员变量必须public static final修饰<br> d.类和抽象类之间关系是单继承，类和接口之间关系是多实现<br> e.思想上的区别<br> 1.抽象类中必须定义整个继承体系中的共性内容<br> 2.接口中定义 整个继承体系之外的 额外扩展的功能。</li></ol><p>7.面向对象3大特征：封装(安全性)，继承(扩展性)，多态(灵活性)<br>    多态：<br>    前提1.必须有子父类关系<br>        2.必须有方法的重写<br>    多态在Java中的表现形式：<br>        父类类型  变量名 = new 子类类型();<br>        接口类型  变量名 = new 实现类();<br>        Animal an = new Cat();<br>        父类类型的变量指向了子类的对象<br>    注意：<br>        1.使用多态调用成员变量<br>            编译时，看父类<br>            运行时，看父类<br>        2.使用多态调用成员方法<br>            编译时，看父类<br>            运行时，看子类<br>总结：<br>    弊端：多态只能调用子父类共有的方法，不能调用子类特有的方法<br>    好处：提高灵活性<br>    父类类型的变量，可以接收任何一个子类的对象<br>    调用方法的时候，编译是看父类，运行时运行的传递过来的子类对象的方法<br>    弊端的解决方案：<br>        向下转型：强制类型转换<br>        向上转型：自动类型转换 (就是多态)<br>    向下转型也有弊端：<br>        把父类的变量 转成任何子类类型时候，编译器直接通过<br>        可以转成cat,本质是dog 所以出错<br>    Java中解决向下转型弊端的方法：<br>        一个关键字Instanceof 运算符<br>        作用：判断某一个变量 不是 该类的类型<br>        格式：<br>            boolean b = an instanceof 类名<br>    多态提高程序的灵活性，扩展性，复用性。</p><ol start="7"><li>static的介绍:<br> static的作用用来修饰类中的成员<br> 1.如果一个类的成员被static修饰了，怎么访问？ 类名.成员变量名<br> 存在方法区中的静态区，只有一个空间  优先于对象存在<br> 2.类名.成员变量(推荐)   对象.成员变量   都可以<br> 3.所有对象共有的，被staic修饰的成员属于类，不属于单个对象<br> 4.静态没有多态性 静态不属于对象，属于类<br> 5.静态代码块：<pre><code>在类的成员位置    static{        代码    }</code></pre> 特点：<br> 使用到这个类时，JVM会自动执行静态代码块<br> 只会第一次使用时执行<br> 优先级比构造方法高，比main方法高<br> 作用：用来初始化类的,myswl数据(静态代码块来加载驱动)</li><li><p>final可以修饰<br> 类，成员变量，成员方法，局部变量(基本类型，引用类型)<br> 1.修饰类(太监类)，不能被继承<br> 2.final修饰成员变量: </p><pre><code>2.1必须在创建对象之前有却确定的值2.3只能赋值一次</code></pre><p> 3.修饰方法:</p><pre><code>不能被子类重写</code></pre><p> 4.修饰基本类型局部变量</p><pre><code>被final修饰的基本类型局部变量  只能赋值一次</code></pre><p> 5.修饰引用类型局部变量</p><pre><code>被final修饰的引用类型局部变量  只能赋值一次但是引用类型所指向的对象中内容是可以改变的</code></pre></li><li><p>匿名内部类：是一种特殊的语法，用来快速创建抽象类的子类对象</p><pre><code>用来快速创建 接口的实现类对象</code></pre><p> AbstractAnimal an1 = new AbstractAnimal(){</p><pre><code>重写</code></pre><p> }<br> 多态</p></li><li>引用数据类型<br>a.类作为方法的参数或者返回值(我们需要传递或返回的是该类的对象)<br>b.抽象类作为方法的参数和返回值  (和9结合起来)我们需要传递或返回的是该抽象类的子类的对象<br>c.接口作为方法的参数和返回值   (我们需要传递或返回的是该接口的实现类的对象)</li><li>链式编程</li><li>权限修饰符<br>如果一个成员只想在本类中使用 用private修饰<br>如果一个成员想在本类和本包的其它类中使用 不写 default<br>如果一个成员想在本类，本包，其他包的子类中使用 用protected修饰<br>如果一个成员想在所有类中使用 用public修饰</li><li><p>Object类：<br>类Object是类层次结构的根类<br>所有类都必须直接或者间接的继承object</p><ol><li>boolean equals(Object obj);<br>p1.equals(p2);<br>//比较两个对象是否相等,在Object类中定义equals方法比较是 两个对象的地址<br>在String类中 重写了object父类中的equals方法，<br> 本来在object类中比较的是两个对象的地址<br> 在String重写后变成比较两个字符串的内容</li></ol><p>我们程序员 通常自定义一个类 也会重写equals</p><ol start="2"><li>toString(); //返回该对象的字符串表示<br> Object类中的默认的返回值：包名.类名@地址<br> 实际开发中toString的使用，重写toString 返回对象中的成员变量</li></ol></li><li><p>异常:是java代码编译或者运行过程中<br>异常的继承体系:<br>Throwable(异常和错误的超类):可以抛出去的东西</p><pre><code>--Exception:异常(普通问题) --编译时异常:  指的是Exception 以及Exception子类  (除了RuntimeException)--运行时异常:  RuntimeException以及其子类--Error:错误(严重问题) 比如:OutOfMemoryError:超出内存错误如果程序出现了错误，只能改代码</code></pre><p>创建异常对象，对异常的基本操作：<br>1.抛出异常 2.处理异常(捕获异常，将异常获取，使用try/catch做分支处理)<br>JVM默认处理异常的方式:(中断处理)<br>处理异常的方式：<br>1.不处理</p><pre><code>public 返回值类型 方法名(参数)throws xxxException{}</code></pre><p>2.捕获处理</p><pre><code>try{    可能出现的异常的代码}catch(Exception e){    //处理异常}finally{    //写上必须要执行的代码    //释放资源的代码}</code></pre><p>3.其他的处理方式</p><pre><code>多个异常分别处理多个个异常一次捕获多次处理多个异常一次捕获一次处理</code></pre><p>父类方法没有抛出异常，子类覆盖父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理。<br>打印异常信息:printStackTrace<br>1.RuntimeException<br>2.ClassCastException   类型转换异常(向下转型的时候)<br>3.ArrayIndexOutOfBoundsException  数组下标越界<br>4.StringIndexOutOfBoundsException  字符串下标越界<br>自定义异常类：<br>1.创建一个类，这个类必须用Exception结尾<br>2.必须继承Exception 或者  RumtimeException<br>3.自定义的异常 至少有两个构造</p><pre><code>a.空参数构造b.带有String类型参数构造</code></pre></li><li><p>Object类:是所有类的根类<br>boolean equals(Object obj)<br>a.Object类中equals方法,比较是两个对象的地址，就是==号的作用<br>b.重写  比较两个字符串的内容   比较两个对象的成员变量的值<br>String toString();//返回该对象的字符串表示   hashCode()返回该对象的数字表示</p></li><li>什么叫设计模式？<br>把解决问题的方案 总结出一个套路<br>1.代理设计模式<br>1.1静态代理设计模式<br>1.2动态代理设计模式</li><li>date类:日期类<pre><code>表示特定的瞬间，精确到毫秒</code></pre>public Date(); //无参构造<br>public Date(long time);<br>1.DateFormat是一个抽象类 我们不能用它<br>2.我们使用它的一个子类：SimpleDateFormat<br>SimpleDateFormat:简单的日期格式化类<br>1.构造<pre><code>public SimpleDateFormat(String pattern);//以指定的模式 创建一个日期格式化对象</code></pre>2.成员方法<pre><code>public String format(Date d);//格式化一个日期对象，返回格式化后的一个字符串public Date parse(String s);//把一个字符串形式的日期，解析成Date对象</code></pre></li><li>Calender类<br>获取Calendar的子类对象<br>获取Calender对象的某个字段 (get)</li><li>System类<br>它不能被实例化，因为构造方法私有化了<br>而且System类中的方法都是静态的，通过类名就可以直接访问<br>System.exit(0); //退出JVM<br>public static void gc(); //运行java的垃圾回收器(并不是马上运行)<br>public static String getProperty(String ProertyName);//获取某一个属性的值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;类的概念：&lt;br&gt; 一堆 具有共同的成员变量、属性和成员方法、功能对象集合&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口的概念：&lt;br&gt; 接口是功能的集合，就是方法的集合&lt;br&gt; 也就是说 接口中只能定义方法，不能定义普通的成员变量&lt;br&gt; 而且接口中的成员方法，必须都是抽象的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/12/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/lesson1/"/>
    <id>http://yoursite.com/2019/12/23/Java学习笔记/lesson1/</id>
    <published>2019-12-23T12:28:57.078Z</published>
    <updated>2019-12-23T12:28:57.078Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>考研</title>
    <link href="http://yoursite.com/2019/03/24/%E8%80%83%E7%A0%94/"/>
    <id>http://yoursite.com/2019/03/24/考研/</id>
    <published>2019-03-24T02:09:24.000Z</published>
    <updated>2019-04-15T09:26:16.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="改变自己"><a href="#改变自己" class="headerlink" title="改变自己"></a>改变自己</h1><a id="more"></a><pre><code>当你发现以后的人生即使努力也是这么回事的时候，你变得迷茫了。眼高手低的同时却不想去努力完成一个既定的目标。人生应该是充满未知可能性的，所以你需要用饱满的热情去挑战新的事物，而非用幻想来填满未来的规划。想不明白，就不必多想到了，起码短期的目标方向是没有问题的，希望自己能坚持向上！认识到自己只是一个普通人，以前沉溺于[轻易获得成就感]的事情（游戏，小说最为致命）。关于未来职业规划我想现在也是非常迷茫的，但是既然现在主要是学习技术的时候，那么就磨练好自己的技术。  </code></pre><ul><li>理财：</li></ul><ol><li>不能负资产</li><li>每天吃饭预算30内</li><li>月攒200</li><li>看书   关于经济学，资本类的书</li></ol><ul><li>生活：</li></ul><ol><li>干净，健身</li><li>不要拖延</li><li>常与人联系</li></ol><ul><li>考研数学：</li></ul><ol><li>高等数学课本：20天一本，3天一章，2h 6月份前</li><li>张宇：3天一章，2.5。5月份前  注意笔记错题记录</li></ol><ul><li>考研英语：</li></ul><ol><li>1996~2004 每天至少一篇精读+背诵    7：30到9：30 6月份前</li><li>吃饭时间阅读英语新闻+百词斩</li><li></li></ol><ul><li>问同学，学长，老师！信息！！！  5月份前</li><li>课内作业白天积极完成+复习</li><li>晚上看书：第一本《资本论》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;改变自己&quot;&gt;&lt;a href=&quot;#改变自己&quot; class=&quot;headerlink&quot; title=&quot;改变自己&quot;&gt;&lt;/a&gt;改变自己&lt;/h1&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言</title>
    <link href="http://yoursite.com/2019/02/25/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2019/02/25/汇编语言/</id>
    <published>2019-02-25T03:00:32.000Z</published>
    <updated>2019-05-23T03:25:00.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><h3 id="数据寻址方式"><a href="#数据寻址方式" class="headerlink" title="数据寻址方式:"></a>数据寻址方式:</h3><ul><li>CPU:</li></ul><ol><li>立即寻址方式</li><li>寄存器寻址方式</li></ol><ul><li>存储器：</li></ul><ol><li>直接寻址方式</li><li>间接寻址方式</li><li>相对寻址方式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;指令系统&quot;&gt;&lt;a href=&quot;#指令系统&quot; class=&quot;headerlink&quot; title=&quot;指令系统&quot;&gt;&lt;/a&gt;指令系统&lt;/h2&gt;&lt;h3 id=&quot;数据寻址方式&quot;&gt;&lt;a href=&quot;#数据寻址方式&quot; class=&quot;headerlink&quot; title=&quot;数据寻址方
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python爬虫初学</title>
    <link href="http://yoursite.com/2019/02/09/python%E7%88%AC%E8%99%AB%E5%88%9D%E5%AD%A6/"/>
    <id>http://yoursite.com/2019/02/09/python爬虫初学/</id>
    <published>2019-02-09T09:44:38.000Z</published>
    <updated>2019-03-07T14:21:25.680Z</updated>
    
    <content type="html"><![CDATA[<p>#coding:utf-8<br><a id="more"></a></p><p>#author:Ericam_</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import urllib.request</span><br><span class="line">import time</span><br><span class="line">headers = (&apos;User-Agent&apos;, &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&apos;)</span><br><span class="line">opener = urllib.request.build_opener()</span><br><span class="line">opener.addheaders = &#123;headers&#125;</span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line">def get_download(url):</span><br><span class="line">    file = urllib.request.urlopen(url)</span><br><span class="line">    data = BeautifulSoup(file , from_encoding=&quot;utf8&quot;)    </span><br><span class="line">    section_name = data.title.string</span><br><span class="line">    print(section_name)</span><br><span class="line">    section_text = data.select(&apos;#content #left font&apos;)[0].text</span><br><span class="line">    section_text=re.sub( &apos;\s+&apos;, &apos;\r\n\t&apos;, section_text).strip(&apos;\r\n&apos;)</span><br><span class="line">    fp = open(&quot;D:/python/2.txt&quot;,&apos;a&apos;,encoding=&apos;utf-8&apos;)   </span><br><span class="line">    fp.write(section_name+&apos;\n&apos;)  </span><br><span class="line">    fp.write(section_text+&apos;\n&apos;)  </span><br><span class="line">    fp.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    url = &quot;http://www.net767.com/shuji/fubaba/10995.html&quot;</span><br><span class="line">    while(True):</span><br><span class="line">        file = urllib.request.urlopen(url)</span><br><span class="line">        data = BeautifulSoup(file , from_encoding=&quot;utf8&quot;)    </span><br><span class="line">        section_name = data.title.string</span><br><span class="line">        print(section_name)</span><br><span class="line">        section_text = data.select(&apos;#content #left font&apos;)[0].text</span><br><span class="line">        section_text=re.sub( &apos;\s+&apos;, &apos;\r\n\t&apos;, section_text).strip(&apos;\r\n&apos;)</span><br><span class="line">        print(section_text)</span><br><span class="line">        txt_section=data.select(&apos;#pagebar a&apos;)</span><br><span class="line">        l1=len(txt_section)</span><br><span class="line">        for num in range(1,l1-1):</span><br><span class="line">            y=txt_section[num][&apos;href&apos;]</span><br><span class="line">            url = &quot;http://www.net767.com&quot;+y</span><br><span class="line">            get_download(url)</span><br><span class="line">            print(y)</span><br><span class="line">        txt2_section=data.select(&apos;.LinkNextArticle&apos;)</span><br><span class="line">        y2=txt2_section[0][&apos;href&apos;]</span><br><span class="line">        url = &quot;http://www.net767.com&quot;+y2</span><br><span class="line">        if(url == &apos;http://www.net767.com/shuji/fubaba/11003_9.html&apos;):</span><br><span class="line">            break</span><br><span class="line">        print(y2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#coding:utf-8&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="http://yoursite.com/2019/02/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/08/Java学习笔记/</id>
    <published>2019-02-08T13:35:42.000Z</published>
    <updated>2019-02-08T13:36:59.187Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript学习笔记</title>
    <link href="http://yoursite.com/2019/01/21/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/01/21/javascript学习笔记/</id>
    <published>2019-01-21T08:28:38.000Z</published>
    <updated>2019-01-22T04:35:19.400Z</updated>
    
    <content type="html"><![CDATA[<p>参考菜鸟教程进行学习<br>  <a id="more"></a></p><h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><p>HTML 中的脚本必须位于 <script> 与 </script> 标签之间。脚本可被放置在 HTML 页面的 <body> 和 <head><meta name="generator" content="Hexo 3.8.0"> 部分中，也可以保存在外部文件中（则不需要加标签）。</head></body></p><h2 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h2><ul><li>使用 window.alert() 弹出警告框。</li><li>使用 document.write() 方法将内容写到 HTML 文档中。</li><li>使用 innerHTML 写入到 HTML 元素。</li><li>使用 console.log() 写入到浏览器的控制台。  </li></ul><script>    var y;    var z;    var d;x=document.getElementsByClassName("Barrage-listItem");y=document.getElementById(x[0].id);d=y.getElementsByTagName("div");var reg = /Barrage-userEnter/i;    console.log(reg.test(d[0].className)); console.log(d[0].className);if(reg.test(d[0].className)){z=y.getElementsByTagName("span");console.log(z[2].title);d[0].className="b";}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考菜鸟教程进行学习&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人随笔</title>
    <link href="http://yoursite.com/2019/01/20/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2019/01/20/个人随笔/</id>
    <published>2019-01-20T12:23:42.000Z</published>
    <updated>2019-04-17T07:24:06.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1月20记"><a href="#1月20记" class="headerlink" title="1月20记"></a>1月20记</h1><a id="more"></a><p>好久没有写日记了，下午和从小长大的朋友聊了会天，真的感觉时间过的好快。而且似乎到了什么年龄，周围的人就会询问关心你这个年龄应该干的事情做的怎么样。就好像上学期间就是学校的好坏，工作期间就是结婚工资。那么究竟你是变得更好还是会更烂呢？  </p><ol><li>考研信息，结课作业。1.21到1.25  </li><li>英语单词，阅读。寒假每天坚持</li><li>线代复习，真题。寒假每天坚持<br>视频每天3个，加看辅导书。</li><li>javascrip,css,html。 </li><li>python,爬虫项目。 1.28到2.2  </li><li>实验室论文，深度学习。 2.2以后</li><li>小程序项目   1.28到2.2</li><li>java  2.2以后<br>前三个尽量做完，4，5，7完成一二即可，6，8能入门就再好不过了。  <h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2></li></ol><ul><li>旅游（估计难了 555）</li><li>联系一下朋友同学 （加油嗷）</li><li>吃饭，作息规律 （一定可以的）</li><li>读完3本书 (穷爸爸，富爸爸  如何阅读一本书  自控力)</li><li>想到的再继续补充~</li></ul><h2 id="2-8到2-20（11天）"><a href="#2-8到2-20（11天）" class="headerlink" title="2.8到2.20（11天）"></a>2.8到2.20（11天）</h2><ul><li>线代每天两个视频，辅导讲义写完  3</li><li>英语一个单元   2.5（课听完）</li><li>看书1个小时   </li><li>查考研信息    问问问</li><li>健身刷牙</li><li>python斗鱼的项目</li><li>小程序的项目</li><li></li></ul><p>#<br>抛弃浮躁，脚踏实地。</p><h2 id="英语："><a href="#英语：" class="headerlink" title="英语："></a>英语：</h2><ul><li>单词：</li></ul><ol><li>高频单词视频看完 （2月之前）</li><li>每天1个list背诵</li><li>空闲时间刷百词斩</li></ol><ul><li>阅读：</li></ul><ol><li>3.4月份：08年之前的真题阅读精读（一天一篇）+网课学习  暂定3个小时</li><li>5，6，7 做完所有真题阅读  </li><li>8，9，10 作文，翻译，完型  暂定<h2 id="数学："><a href="#数学：" class="headerlink" title="数学："></a>数学：</h2></li></ol><ul><li>线代：</li></ul><ol><li>两天一章，视频+讲义+课本看完（2月底）</li><li>暂定暑假过第二遍</li></ol><ul><li>高数：</li></ul><ol><li>3，4月刷高数18讲+书+记笔记（第一遍）</li><li>后来暂定</li></ol><ul><li>概率论：</li></ul><ol><li>5或6月份<h2 id="专业课："><a href="#专业课：" class="headerlink" title="专业课："></a>专业课：</h2></li><li>大概确定院校！！！</li><li>背书</li><li>真题<h2 id="政治："><a href="#政治：" class="headerlink" title="政治："></a>政治：</h2></li><li>9月份大纲确定开始</li></ol><h2 id="时间安排：（暂定，根据具体情况会调整）"><a href="#时间安排：（暂定，根据具体情况会调整）" class="headerlink" title="时间安排：（暂定，根据具体情况会调整）"></a>时间安排：（暂定，根据具体情况会调整）</h2><ol><li>6：30~6：40洗漱</li><li>6：40~7：00吃早饭</li><li>7：10~8：00背单词</li><li>8：00~12：00</li><li>12：00~12：20吃饭</li><li>12：20~1：10休息</li><li>1：30~4：30</li><li>4：40~5：30健身</li><li>5：30~5:50吃饭</li><li>6：00~6：20洗澡</li><li>6：30~11:00</li><li>11:00~11:30洗漱，处理部分事情，睡觉</li></ol><ul><li>补充：</li></ul><ol><li>根据上课的时间进行有效调整</li><li>最重要的是把每天的任务计划都要提前列出来并且完成</li><li>咨询考研相关信息（学校，实验室，导师，考研参考书，学习方法，有效途径，询问学长学姐老师同学）放在中午12：00~1：30，4：30~6；30，11：00以后  其他时间不要看！！！</li><li></li></ol><ul><li>3.8</li></ul><ol><li>7点起来 洗漱，吃饭。</li><li>8点到9点背单词和句子</li><li>9点到11点看英语视频</li><li>11点去吃饭+问王伟考研学校+专业课考什么</li><li>2点到4：30点看线代视频</li><li>4：30~6：30 健身，吃饭，洗澡</li><li>6：30~10：00 高数</li><li>买参考书</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1月20记&quot;&gt;&lt;a href=&quot;#1月20记&quot; class=&quot;headerlink&quot; title=&quot;1月20记&quot;&gt;&lt;/a&gt;1月20记&lt;/h1&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="http://yoursite.com/2019/01/19/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/01/19/hexo-github搭建博客/</id>
    <published>2019-01-19T06:59:20.000Z</published>
    <updated>2019-05-17T02:55:53.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>  搭建博客的过程教程很多，我也是参照网上的教程搭建的博客。搭建博客已经过去半年了，但是自己这么久却没有写这篇博文，多说无益，希望能从这篇博客开始先记录hexo博客的问题以及解决方法然后能坚持下去将自己所学所见记录下来，也作为自己生活学习的一个监督和记录。<br>  <a id="more"></a></p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><ol><li>GitHub创建个人仓库（名称与用户名一致）  </li><li><p>git安装，绑定github密钥  </p><blockquote><p>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”  </p></blockquote><p> 生成ssh密钥文件：  </p><blockquote><p>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</p></blockquote><p> 打开<a href="link" title="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p></li></ol><ol start="3"><li>安装node.js，npm   </li><li><p>安装hexo：</p><blockquote><p>npm install -g hexo-cli   </p></blockquote><p> 博客初始化：</p><blockquote><p>hexo init blog</p></blockquote><p> 查看本地localhost是否成功  </p></li><li>修改.yml站点配置文件，绑定github  </li><li>绑定域名<br> 在blog\source下新建CNAME文件（无文件名）,例如：<br> XXX.top<br> 域名解析：建立CNAME解析，主机名分别为@和www，对应值都是你的 Github 个人主页地址  </li><li>最后hexo g,hexo d,就ok辣。  </li></ol><h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署<br>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令  </p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>首先第一次搭建完成后，遇到了61行date的问题 ，一直没有解决，所以我选择了再次搭建，并且将此过程记录了下来。</p><ol><li>使用hexo命令显示无效<br><strong>注意需要在blog文件下进行操作</strong><br><strong>还有congig.yml 空格问题基本新手都会犯</strong>  </li><li>执行hexo命令出现ERROR<br><strong>npm install 即可</strong>  </li><li>前面都没有问题到了hexo d时候连接不上git<br><strong>所以不应用http 应该使用git</strong>  </li><li>本地命令成功 但是localhost:访问不到网址<br><strong>大概率是端口占用了</strong>  </li><li>本地可以访问但是用户名加github.io无法访问<br><strong>注意库名与用户名一致!!!</strong>    </li><li><p>下载主题出现代理的问题<br> <strong>查询是否使用代理：</strong></p><blockquote><p>git config –global http.proxy   </p></blockquote><p> <strong>取消代理：</strong>  </p><blockquote><p>git config –global –unset http.proxy  </p></blockquote></li><li>ERROR Process failed: about/index.md<br>TypeError: Cannot read property ‘utcOffset’ of null<br>折腾了半天发现原来站点的配置文件的timezone也就是时区必须要和主题的的配置文件一直，把这两个文件下的timezone都设为Asia/Shanghai就解决了</li><li>Cannot GET/xxx<br>查看index.html文件是否还在，可以参考<a href="link" title="https://www.jianshu.com/p/af83fc73e525">这个</a></li></ol><p style="color: #AD5D0F;font-size: 23px; font-family: '宋体';">附加功能：</p><hr><h3 id="1-打赏"><a href="#1-打赏" class="headerlink" title="1.打赏"></a>1.打赏</h3><ol><li>准备支付宝和微信二维码</li><li>在_config.yml中配置图片  <blockquote><p>reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！<br>wechatpay: /images/wechat.jpg<br>alipay: /images/aipay.png  </p></blockquote></li><li>wechat.jpg、alipay.png图片放入themes/next/source/images(主题配置)中</li><li>（解决文字闪烁问题）修改next/source/css/_common/components/post/post-reward.styl，注释wechat:hover和alipay:hover</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;  搭建博客的过程教程很多，我也是参照网上的教程搭建的博客。搭建博客已经过去半年了，但是自己这么久却没有写这篇博文，多说无益，希望能从这篇博客开始先记录hexo博客的问题以及解决方法然后能坚持下去将自己所学所见记录下来，也作为自己生活学习的一个监督和记录。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
